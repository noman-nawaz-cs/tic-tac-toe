{"mappings":"AAAA,IAAI,WAAW;AACf,IAAI,YAAwB,IAAI,MAAM,UAAU,IAAI,CAAC,MAAM,GAAG,CAAC,IAAM,IAAI,MAAM,UAAU,IAAI,CAAC;AAC9F,IAAI,aAAqB;AACzB,MAAM,OAAO,SAAS,cAAc,CAAC;AACrC,MAAM,OAAO,SAAS,cAAc,CAAC;AACrC,MAAM,OAAO,SAAS,cAAc,CAAC;AACrC,MAAM,cAAc,SAAS,cAAc,CAAC;AAC5C,MAAM,cAAc,SAAS,cAAc,CAAC;AAC5C,MAAM,cAAc,SAAS,cAAc,CAAC;AAC5C,IAAI,sBAAgD;AAEpD,SAAS,UAAU,IAAgB,EAAE,MAAc;IAC/C,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,IAAK;QAClC,IAAK,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,OAAS,SAAS,SAClC,OAAO;IACf;IACA,OAAO;AACX;AAEA,SAAS,aAAa,IAAgB,EAAE,MAAc;IAClD,IAAI;IACJ,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,IAAK;QAClC,OAAO;QACP,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,IAChC,IAAI,IAAI,CAAC,EAAE,CAAC,EAAE,KAAI,QACd,OAAO;QAEf,IAAI,MACA,OAAO;IACf;IACA,OAAO;AACX;AAEA,SAAS,eAAe,IAAgB,EAAE,MAAc;IACpD,IAAI,OAAO;IACX,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,IAC7B,IAAG,IAAI,CAAC,EAAE,CAAC,EAAE,KAAK,QACd,OAAO;IAEf,IAAI,MACA,OAAO;IACX,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,IAAK;QAClC,IAAG,IAAI,CAAC,EAAE,CAAC,KAAK,MAAM,GAAG,IAAI,EAAE,KAAK,QAChC,OAAO;IACf;IACA,OAAO;AACX;AAEA,SAAS,UAAU,IAAgB,EAAE,MAAc;IAC/C,OAAO,UAAU,MAAM,WAAW,aAAa,MAAM,WAAW,eAAe,MAAM;AACzF;AAEA,SAAS,eAAe,OAAoB,EAAE,MAAc;IACxD,QAAQ,SAAS,GAAG;IACpB,QAAQ,KAAK,CAAC,KAAK,GAAG;IACtB,QAAQ,KAAK,CAAC,QAAQ,GAAG;IACzB,WAAY;QACR;IACJ,GAAG;AACP;AAEA,SAAS,WAAW,OAAoB,EAAE,QAAgB;IACtD;IACA,YAAY,IAAI,MAAM,UAAU,IAAI,CAAC,MAAM,GAAG,CAAC,IAAM,IAAI,MAAM,UAAU,IAAI,CAAC;IAC9E,MAAM,cAAc,SAAS,cAAc,CAAC;IAC5C,YAAY,SAAS,GAAG;IACxB,QAAQ,SAAS,GAAG;IACpB,IAAI,IAAI,IAAI,GAAG,IAAI,WAAS,UAAU,IAAK;QACvC,MAAM,OAAO,SAAS,aAAa,CAAC;QACpC,KAAK,SAAS,GAAG;QACjB,QAAQ,WAAW,CAAC;IACxB;IACA,QAAQ,KAAK,CAAC,mBAAmB,GAAG,CAAC,OAAO,EAAE,SAAS,MAAM,CAAC;IAC9D,QAAQ,KAAK,CAAC,gBAAgB,GAAG,CAAC,OAAO,EAAE,SAAS,MAAM,CAAC;IAC3D,MAAM,kBAAkB,SAAS,cAAc,CAAC;IAChD,gBAAgB,KAAK,CAAC,KAAK,GAAG;IAC9B,gBAAgB,KAAK,CAAC,QAAQ,GAAG;AAErC;AAEA,SAAS,UAAU,aAAqB;IACpC;IACA,MAAM,cAAc,SAAS,cAAc,CAAC;IAC5C,YAAY,SAAS,GAAG,CAAC,OAAO,EAAE,cAAc,OAAO,CAAC;IACxD,MAAM,OAAO,SAAS,sBAAsB,CAAC;IAC7C,MAAM,WAAW,KAAK,IAAI,CAAC,KAAK,MAAM;IACtC,IAAI,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,IAC5B,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,SAAS;QAC9B,SAAS,CAAC,KAAK,KAAK,CAAC,IAAE,UAAU,CAAC,IAAE,SAAS,GAAG;QAChD,IAAG,IAAI,CAAC,EAAE,CAAC,WAAW,KAAK,IAAI;YAC3B,IAAI,CAAC,EAAE,CAAC,WAAW,GAAG;YACtB;YACA,IAAG,UAAU,WAAW,gBAAgB;gBACpC,eAAe,aAAc,CAAC,OAAO,EAAE,cAAc,MAAM,CAAC;gBAC5D;YACJ;YACA,IAAI,eAAe,KAAK,MAAM,EAAE;gBAC5B,eAAe,aAAa;gBAC5B;YACJ;YACA,gBAAgB,kBAAkB,MAAK,MAAM;YAC7C,YAAY,SAAS,GAAG,CAAC,OAAO,EAAE,cAAc,OAAO,CAAC;QAC5D;IACJ;AAER;AAEA,SAAS;IACL,gBAAgB;IAChB,aAAa;IACb,MAAM,YAAY,SAAS,sBAAsB,CAAC;IAClD,IAAI,IAAI,IAAI,GAAG,IAAI,UAAU,MAAM,EAAE,IACjC,SAAS,CAAC,EAAE,CAAC,WAAW,GAAG;IAE/B,YAAY,IAAI,MAAM,UAAU,IAAI,CAAC,MAAM,GAAG,CAAC,IAAM,IAAI,MAAM,UAAU,IAAI,CAAC;IAC9E,MAAM,OAAO,SAAS,cAAc,CAAC;IACrC,WAAW,MAAM;AACrB;AAEA,SAAS;IACL,IAAI,aAAa,YAAY,QAAQ,GAAG;IACxC,IAAI,aAAa,YAAY,QAAQ,GAAG;AAC5C;AAEA,SAAS;IACL,IAAI,aAAa,YAAY,QAAQ,GAAG;IACxC,IAAI,aAAa,YAAY,QAAQ,GAAG;AAC5C;AAEA,SAAS,gBAAgB,MAAyB;IAC9C,IAAI,qBACA,oBAAoB,KAAK,CAAC,eAAe,GAAG;IAEhD,OAAO,KAAK,CAAC,eAAe,GAAG;IAC/B,sBAAsB;AAC1B;AAEA,OAAO,gBAAgB,CAAC,QAAQ;IAC5B,gBAAgB;IAChB,MAAM,OAAO,SAAS,cAAc,CAAC;IACrC,WAAW,MAAM;AACrB;AAEA,MAAM,iBAAiB,SAAS;IAC5B,gBAAgB;IAChB,MAAM,OAAO,SAAS,cAAc,CAAC;IACrC,WAAW,MAAM;AACrB;AAEA,MAAM,iBAAiB,SAAS;IAC5B,gBAAgB;IAChB,MAAM,OAAO,SAAS,cAAc,CAAC;IACrC,WAAW,MAAM;AACrB;AAEA,MAAM,iBAAiB,SAAS;IAC5B,gBAAgB;IAChB,MAAM,OAAO,SAAS,cAAc,CAAC;IACrC,WAAW,MAAM;AACrB;AAEA,aAAa,iBAAiB,SAAS;IACnC,UAAU;AACd;AAEA,aAAa,iBAAiB,SAAS;IACnC,UAAU;AACd;AAEA,aAAa,iBAAiB,SAAS;IACnC;AACJ","sources":["src/index.ts"],"sourcesContent":["let gridSize = 3;\r\nlet gridArray: string[][] = new Array(gridSize).fill(null).map(() => new Array(gridSize).fill(null));\r\nlet movesCount: number = 0;\r\nconst btn1 = document.getElementById('btn-1') as HTMLButtonElement;\r\nconst btn2 = document.getElementById('btn-2') as HTMLButtonElement;\r\nconst btn3 = document.getElementById('btn-3') as HTMLButtonElement;\r\nconst playerX_btn = document.getElementById('player-x') as HTMLButtonElement;\r\nconst playerO_btn = document.getElementById('player-o') as HTMLButtonElement;\r\nconst resetButton = document.getElementById('reset-button') as HTMLButtonElement;\r\nlet currentActiveButton: HTMLButtonElement | null = null;\r\n\r\nfunction checkRows(grid: string[][], player: string): boolean {\r\n    for (let i = 0; i < grid.length; i++) {\r\n        if ((grid[i].every((item) => item === player)))\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction checkColumns(grid: string[][], player: string): boolean {\r\n    let flag;\r\n    for (let i = 0; i < grid.length; i++) {\r\n        flag = true;\r\n        for (let j = 0; j < grid[i].length; j++){\r\n            if (grid[j][i]!== player) \r\n                flag = false;\r\n        }\r\n        if (flag)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction checkDiagonals(grid: string[][], player: string): boolean {\r\n    let flag = true;\r\n    for (let i = 0; i < grid.length; i++) {\r\n        if(grid[i][i] !== player) \r\n            flag = false;\r\n    }\r\n    if (flag)\r\n        return true;\r\n    for (let i = 0; i < grid.length; i++) {\r\n        if(grid[i][grid.length - i - 1] !== player) \r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction getWinner(grid: string[][], player: string): boolean {\r\n    return checkRows(grid, player) || checkColumns(grid, player) || checkDiagonals(grid, player);\r\n}\r\n\r\nfunction announceWinner(element: HTMLElement, player: string){\r\n    element.innerHTML = player;\r\n    element.style.color = 'green';\r\n    element.style.fontSize = '28px';\r\n    setTimeout( () => {\r\n        resetGrid();\r\n    }, 2000);\r\n}\r\n\r\nfunction resizeGrid(element: HTMLElement, gridSize: number){\r\n    enablePlayerButtons();\r\n    gridArray = new Array(gridSize).fill(null).map(() => new Array(gridSize).fill(null));\r\n    const currentTurn = document.getElementById('turn') as HTMLElement;\r\n    currentTurn.innerHTML = '';\r\n    element.innerHTML = '';\r\n    for(let i = 0; i < gridSize*gridSize; i++) {\r\n        const cell = document.createElement('div');\r\n        cell.className = 'grid-cell';\r\n        element.appendChild(cell);\r\n    }\r\n    element.style.gridTemplateColumns = `repeat(${gridSize}, 1fr)`;\r\n    element.style.gridTemplateRows = `repeat(${gridSize}, 1fr)`;\r\n    const resetWinnerText = document.getElementById('turn') as HTMLElement;\r\n    resetWinnerText.style.color = '#d32f2f';\r\n    resetWinnerText.style.fontSize = '1.2em';\r\n\r\n}\r\n\r\nfunction startGame(currentPlayer: string){\r\n    disablePlayerButtons();\r\n    const currentTurn = document.getElementById('turn') as HTMLElement;\r\n    currentTurn.innerHTML = `Player ${currentPlayer}'s turn`;\r\n    const grid = document.getElementsByClassName('grid-cell');\r\n    const gridSize = Math.sqrt(grid.length); \r\n    for(let i = 0; i < grid.length; i++) {\r\n        grid[i].addEventListener('click', () => {\r\n            gridArray[Math.floor(i/gridSize)][i%gridSize] = currentPlayer;\r\n            if(grid[i].textContent === '') {\r\n                grid[i].textContent = currentPlayer;\r\n                movesCount++;\r\n                if(getWinner(gridArray, currentPlayer)) {\r\n                    announceWinner(currentTurn,  `Player ${currentPlayer} wins!`);\r\n                    return;\r\n                }\r\n                if (movesCount === grid.length) {\r\n                    announceWinner(currentTurn, \"Match is drawn\");\r\n                    return;\r\n                }\r\n                currentPlayer = currentPlayer === 'X'? 'O' : 'X';\r\n                currentTurn.innerHTML = `Player ${currentPlayer}'s turn`;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction resetGrid(){\r\n    setActiveButton(btn1);\r\n    movesCount = 0\r\n    const gridCells = document.getElementsByClassName('grid-cell');\r\n    for(let i = 0; i < gridCells.length; i++) {\r\n        gridCells[i].textContent = '';\r\n    }\r\n    gridArray = new Array(gridSize).fill(null).map(() => new Array(gridSize).fill(null));\r\n    const grid = document.getElementById('grid') as HTMLElement;\r\n    resizeGrid(grid, gridSize);\r\n}\r\n\r\nfunction disablePlayerButtons() {\r\n    if (playerX_btn) playerX_btn.disabled = true;\r\n    if (playerO_btn) playerO_btn.disabled = true;\r\n}\r\n\r\nfunction enablePlayerButtons() {\r\n    if (playerX_btn) playerX_btn.disabled = false;\r\n    if (playerO_btn) playerO_btn.disabled = false;\r\n}\r\n\r\nfunction setActiveButton(button: HTMLButtonElement) {\r\n    if (currentActiveButton) {\r\n        currentActiveButton.style.backgroundColor = ''; \r\n    }\r\n    button.style.backgroundColor = '#1565c0'; \r\n    currentActiveButton = button;\r\n}\r\n\r\nwindow.addEventListener('load', () => {\r\n    setActiveButton(btn1);\r\n    const grid = document.getElementById('grid') as HTMLElement;\r\n    resizeGrid(grid, gridSize);\r\n});\r\n\r\nbtn1?.addEventListener('click', () => {\r\n    setActiveButton(btn1);\r\n    const grid = document.getElementById('grid') as HTMLElement;\r\n    resizeGrid(grid, 3);\r\n});\r\n\r\nbtn2?.addEventListener('click', () => {\r\n    setActiveButton(btn2);\r\n    const grid = document.getElementById('grid') as HTMLElement;\r\n    resizeGrid(grid, 5);\r\n});\r\n\r\nbtn3?.addEventListener('click', () => {\r\n    setActiveButton(btn3);\r\n    const grid = document.getElementById('grid') as HTMLElement;\r\n    resizeGrid(grid, 7);\r\n});\r\n\r\nplayerX_btn?.addEventListener('click', () => {\r\n    startGame('X');\r\n});\r\n\r\nplayerO_btn?.addEventListener('click', () => {\r\n    startGame('O');\r\n});\r\n\r\nresetButton?.addEventListener('click', () => {\r\n    resetGrid();\r\n});\r\n"],"names":[],"version":3,"file":"index.377278e2.js.map","sourceRoot":"/__parcel_source_root/"}